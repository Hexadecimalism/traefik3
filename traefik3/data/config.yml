http:
 #region routers 
  routers:
    # yggdrasil:
      # entryPoints:
        # - "https"
      # rule: "Host(`yggdrasil.local.my-website.net`)"
      # middlewares:
        # - default-headers
        # - https-redirectscheme
      # tls: {}
      # service: yggdrasil
    # jarngreipr:
      # entryPoints:
        # - "https"
      # rule: "Host(`jarngreipr.local.my-website.net`)"
      # middlewares:
        # - default-headers
        # - https-redirectscheme
      # tls: {}
      # service: jarngreipr
    # megingjord:
      # entryPoints:
        # - "https"
      # rule: "Host(`megingjord.local.my-website.net`)"
      # middlewares:
        # - default-headers
        # - https-redirectscheme
      # tls: {}
      # service: megingjord
    pihole:
      entryPoints:
        - "https"
      rule: "Host(`pihole.local.my-website.net`)"
      middlewares:
        - redirectregex-pihole
        - default-headers
        - addprefix-pihole
        - https-redirectscheme
      tls: {}
      service: pihole
    homeassistant:
      # For Homeassistant config, check: https://www.home-assistant.io/integrations/http/#reverse-proxies
      # This relies on Homeassistant using http. No certs are needed in the Homeassistant config.
      entryPoints:
        - "https"
      rule: "Host(`homeassistant.local.my-website.net`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: homeassistant
      
    truenas:
      entryPoints:
        - "https"
      rule: "Host(`truenas.local.my-website.net`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: {}
      service: truenas
    # jellyfin:
      # entryPoints:
        # - "https"
      # rule: "Host(`jellyfin.local.my-website.net`)"
      # middlewares:
        # - default-headers
        # - https-redirectscheme
      # tls: {}
      # service: jellyfin
    # opnsense:
      # entryPoints:
        # - "https"
      # rule: "Host(`opnsense.local.my-website.net`)"
      # middlewares:
        # - default-headers
        # - https-redirectscheme
      # tls: {}
      # service: opnsense
    # pterodactyl:
      # entryPoints:
        # - "https"
      # rule: "Host(`pterodactyl.local.my-website.net`)"
      # middlewares:
        # - default-headers
        # - https-redirectscheme
      # tls: {}
      # service: pterodactyl
#endregion
#region services
  services:
    # yggdrasil:
      # loadBalancer:
        # servers:
          # - url: "https://192.168.1.210:8006/"
        # passHostHeader: true
    # jarngreipr:
      # loadBalancer:
        # servers:
          # - url: "https://192.168.1.205:8006/"
        # passHostHeader: true
    # megingjord:
      # loadBalancer:
        # servers:
          # - url: "https://192.168.1.215:8006/"
        # passHostHeader: true
    pihole:
      loadBalancer:
        servers:
          - url: "http://192.168.1.199:80"
        passHostHeader: true
    homeassistant:
      loadBalancer:
        servers:
          - url: "http://192.168.1.156:8123"
        passHostHeader: true
    truenas:
      loadBalancer:
        servers:
          - url: "https://192.168.1.19"
        passHostHeader: true
    # jellyfin:
      # loadBalancer:
        # servers:
          # - url: "https://192.168.0.101:32400"
        # passHostHeader: true
    # opnsense:
      # loadBalancer:
        # servers:
          # - url: "https://192.168.0.102"
        # passHostHeader: true
    # pterodactyl:
      # loadBalancer:
        # servers:
          # - url: "http://192.168.0.110:80"
        # passHostHeader: true
#endregion
  middlewares:
    addprefix-pihole:
      addPrefix:
        prefix: "/admin"
    https-redirectscheme:
      redirectScheme:
        scheme: https
        permanent: true
    redirectregex-pihole:
      redirectRegex:
        regex: "/admin/(.*)"
        replacement: /

    default-headers:
      headers:
        frameDeny: true
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 15552000
        customFrameOptionsValue: SAMEORIGIN
        customRequestHeaders:
          X-Forwarded-Proto: https
          
    default-whitelist:
      ipWhiteList:
        sourceRange:
        - "10.0.0.0/8"
        - "192.168.0.0/16"
        - "172.16.0.0/12"

    secured:
      chain:
        middlewares:
        - default-whitelist
        - default-headers